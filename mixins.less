//      ┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
//      │ ++++ MIXINS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ │
//      │   LESS mixins designed for inclusion within dependencies, regardless of semantics, to specify                 │
//      │   spacing, padding, sizing, textual flow, and responsive behaviors.                                           │
//      └───────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

//        ┌-----------------------------------------------------------------------------------------------------------┐
//        │ AUTHOR: Daniel Rieck <daniel.rieck@wsu.edu> (https://github.com/invokeImmediately)                        │
//        │                                                                                                           │
//        │ DESCRIPTION: Contains CSS classes designed for inclusion within larger rulesets as mixins, as well as     │
//        |              advanced LESS constructs whose functionality is driven by mixin guarding.                    │
//        │                                                                                                           │
//        │ DEPENDENCIES: This file assumes the following LESS files have been imported upstream:                     │
//        │   • //github.com/invokeImmediately/WSU-UE---CSS/variables.less                                            │
//        └-----------------------------------------------------------------------------------------------------------┘

//        ┌-----------------------------------------------------------------------------------------------------------┐
//        │ ···· Mixins for broadly controlling content layout. ····················································· │
//        └-----------------------------------------------------------------------------------------------------------┘

.initially-hidden, 
.column .initially-hidden {
    display: none;
}

.set-widths(@wdth, @mn-wdth: "na", @mx-wdth: "na") when (@mn-wdth > 0) and (isnumber(@mn-wdth))
  and (@mx-wdth = "na") {
	width: @wdth;
	min-width: @mn-wdth;
}
.set-widths(@wdth, @mn-wdth: "na", @mx-wdth: "na") when (@mx-wdth = "na") and (@mx-wdth > 0)
  and (isnumber(@mx-wdth)) {
	width: @wdth;
	max-width: @mx-wdth;
}
.set-widths(@wdth, @mn-wdth: "na", @mx-wdth: "na") when (@mx-wdth = "na") and (@mx-wdth > 0)
  and (isnumber(@mx-wdth)) {
	width: @wdth;
	min-width: @mn-wdth;
	max-width: @mx-wdth;
}

.set-pstn-top(@pstn) when not (@pstn = "na") {
	top: @pstn;
}
.set-pstn-rgt(@pstn) when not (@pstn = "na") {
	right: @pstn;
}
.set-pstn-btm(@pstn) when not (@pstn = "na") {
	bottom: @pstn;
}
.set-pstn-lft(@pstn) when not (@pstn = "na") {
	left: @pstn;
}
.set-position(@pstn: "na", @pstn-top: "na", @pstn-rgt: "na", @pstn-btm: "na", @pstn-lft: "na") when not (@pstn = "na") {
	position: @pstn;
	.set-pstn-top(@pstn-top);
	.set-pstn-rgt(@pstn-rgt);
	.set-pstn-btm(@pstn-btm);
	.set-pstn-lft(@pstn-lft);
}

//        ┌-----------------------------------------------------------------------------------------------------------┐
//        │ ···· Spacing ···························································································· │
//        └-----------------------------------------------------------------------------------------------------------┘

.margin-centered,
.column .margin-centered {
    margin-right: auto;
     margin-left: auto;
}

.vrtcl-spcng-full() {
    margin-top: @v-dflt-spcng;
     margin-bottom: @v-dflt-spcng;
}

.vrtcl-spcng-less() {
    margin-top: (@v-dflt-spcng * 0.75);
     margin-bottom: (@v-dflt-spcng * 0.75);
}

.vrtcl-spcng-half() {
    margin-top: (@v-dflt-spcng / 2);
     margin-bottom: (@v-dflt-spcng / 2);
}

.spaces-top(@sclng-fctr: 1.0) {
    margin-top: (@v-dflt-spcng * @sclng-fctr);
}

.spaces-rgt(@sclng-fctr: 1.0) {
    margin-right: (@v-dflt-spcng * @sclng-fctr);
}

.spaces-btm(@sclng-fctr: 1.0) {
    margin-bottom: (@v-dflt-spcng * @sclng-fctr);
}

.spaces-lft(@sclng-fctr: 1.0) {
    margin-left: (@v-dflt-spcng * @sclng-fctr);
}

.declare-spacing-class(@class-str, @spacing-factor) {
	.spaces-top-@{class-str},
	.column .spaces-top-@{class-str} {
		.spaces-top(@spacing-factor);
	}
	.spaces-rgt-@{class-str},
	.column .spaces-rgt-@{class-str} {
		.spaces-rgt(@spacing-factor);
	}
	.spaces-btm-@{class-str},
	.column .spaces-btm-@{class-str} {
		.spaces-btm(@spacing-factor);
	}
	.spaces-lft-@{class-str},
	.column .spaces-lft-@{class-str} {
		.spaces-lft(@spacing-factor);
	}
}

@spacing-class-list: @sz-xxxsmll, 8th, @sz-xxsmll, qrtr, @sz-xsmll, half, @sz-nrml, nrml, @sz-xxxlrg, full;

.setup-spacing-classes(extract(@spacing-class-list, length(@spacing-class-list)), extract(@spacing-class-list, length(@spacing-class-list) - 1), length(@spacing-class-list));

.setup-spacing-classes(@class-str, @spacing-factor, @idx) when (@idx >= 4) {
	.declare-spacing-class(@class-str, @spacing-factor);
	.setup-spacing-classes(extract(@spacing-class-list, @idx - 2), extract(@spacing-class-list, @idx - 3), @idx - 2);
}

.setup-spacing-classes(@class-str, @spacing-factor, @idx) when (@idx = 2) {
	.declare-spacing-class(@class-str, @spacing-factor);
}

.spaces-top-none,
.column .spaces-top-none {
	.spaces-top(0) !important;
}

.spaces-rgt-none,
.column .spaces-rgt-none {
	.spaces-rgt(0) !important;
}

.spaces-btm-none,
.column .spaces-btm-none {
	.spaces-btm(0) !important;
}

.spaces-lft-none,
.column .spaces-lft-none {
	.spaces-lft(0) !important;
}

//        ┌-----------------------------------------------------------------------------------------------------------┐
//        │ ···· Padding ···························································································· │
//        └-----------------------------------------------------------------------------------------------------------┘

.pads-top(@sclng-fctr: 1.0) {
    padding-top: (@v-dflt-spcng * @sclng-fctr);
}

.pads-rgt(@sclng-fctr: 1.0) {
    padding-right: (@v-dflt-spcng * @sclng-fctr);
}

.pads-btm(@sclng-fctr: 1.0) {
    padding-bottom: (@v-dflt-spcng * @sclng-fctr);
}

.pads-lft(@sclng-fctr: 1.0) {
    padding-right: (@v-dflt-spcng * @sclng-fctr);
}

.declare-padding-class(@class-str, @padding-factor) {
	.pads-top-@{class-str},
	.column .pads-top-@{class-str} {
		.pads-top(@padding-factor);
	}
	.pads-rgt-@{class-str},
	.column .pads-rgt-@{class-str} {
		.pads-rgt(@padding-factor);
	}
	.pads-btm-@{class-str},
	.column .pads-btm-@{class-str} {
		.pads-btm(@padding-factor);
	}
	.pads-lft-@{class-str},
	.column .pads-lft-@{class-str} {
		.pads-lft(@padding-factor);
	}
}

@padding-class-list: @sz-xxxsmll, 8th, @sz-xxsmll, qrtr, @sz-xsmll, half, @sz-nrml, nrml, @sz-xxxlrg, full;

.setup-padding-classes(extract(@padding-class-list, length(@padding-class-list)), extract(@padding-class-list, length(@padding-class-list) - 1), length(@padding-class-list));

.setup-padding-classes(@class-str, @padding-factor, @idx) when (@idx >= 4) {
	.declare-padding-class(@class-str, @padding-factor);
	.setup-padding-classes(extract(@padding-class-list, @idx - 2), extract(@padding-class-list, @idx - 3), @idx - 2);
}

.setup-padding-classes(@class-str, @padding-factor, @idx) when (@idx = 2) {
	.declare-padding-class(@class-str, @padding-factor);
}

.generate-indents(4);

.generate-indents(@n, @i: 1) when (@i <= @n) {
    .indent-@{i}x,
	.column .indent-@{i}x {
        padding-left: (2rem * @i);
    }
    .indent-rgt-@{i}x,
	.column .indent-rgt-@{i}x {
        padding-right: (2rem * @i);
    }
    .generate-indents(@n, (@i + 1));
}

//        ┌-----------------------------------------------------------------------------------------------------------┐
//        │ ···· Textual rendering ·················································································· │
//        └-----------------------------------------------------------------------------------------------------------┘

.breaks-words,
.column .breaks-words {
    word-wrap: break-word;
}

.centered,
.column .centered,
.centers-text,
.column .centers-text {
    text-align: center;
}

.has-centered-txt() {
    text-align: center;
}

.has-smllr-txt() {
    font-size: 0.9em;
}

.has-upprcs-txt() {
    text-transform: uppercase;
}

//        ┌-----------------------------------------------------------------------------------------------------------┐
//        │ ···· Bordering ·························································································· │
//        └-----------------------------------------------------------------------------------------------------------┘

.soft-gray-border,
.column .soft-gray-border {
    .rgb-darkest-gray(); border: 1px solid rgba(@rval, @gval, @bval, 0.5);
}

.has-pull-quote-bordering {
	&:not(.alt) {
		position: relative;
		padding-top: (@v-btm-mrgns / 3) !important;
		padding-bottom: (@v-btm-mrgns / 3) !important;
		&:not(:first-child) {
			margin-top: @v-dflt-spcng;
		}
		&:first-child,
		header:first-child + & {
			margin-top: (@v-btm-mrgns / 3);
		}
		&:before,
		&:after {
			content: "";
			position: absolute;
			left: 0;
			width: 67%;
		}
		&:before {
			top: (-1 * @v-btm-mrgns / 3);
			height: 5px;
			border-top: 5px solid rgba(red(@hex-darker-gray), green(@hex-darker-gray),
						blue(@hex-darker-gray), 1);
		}
		&:after {
			bottom: (-1 * @v-btm-mrgns / 3);
			height: 1px;
			width: 33%;
			border-top: 1px solid rgba(red(@hex-darker-gray), green(@hex-darker-gray),
						blue(@hex-darker-gray), (0.25 / 0.33));
		}
	}
	&.alt {
		position: relative;
		padding-left: (@v-btm-mrgns * 3 / 4) !important;
		padding-right: (@v-btm-mrgns * 3 / 4) !important;
		border-right: 1px solid rgba(red(@hex-darker-gray), green(@hex-darker-gray),
					blue(@hex-darker-gray), (0.25 / 0.33 / 4));
		border-left: 5px solid rgba(red(@hex-darker-gray), green(@hex-darker-gray),
					blue(@hex-darker-gray), 1);
		&:before,
		&:after {
			content: "";
			position: absolute;
			top: 0;
			width: 1px;
			height: 100%;
		}
		&:before {
			right: 1px;
			background-color: rgba(red(@hex-darker-gray), green(@hex-darker-gray),
								   blue(@hex-darker-gray), (0.25 / 0.33 / 2));
		}
		&:after {
			right: 3px;
			background-color: rgba(red(@hex-darker-gray), green(@hex-darker-gray),
								   blue(@hex-darker-gray), (0.25 / 0.33));
		}
	}
}
	

//        ┌-----------------------------------------------------------------------------------------------------------┐
//        │ ···· Typography ························································································· │
//        └-----------------------------------------------------------------------------------------------------------┘

.has-responsive-font(@fntsz, @lnhght, @sclng-fctrs: @v-fnt-sclng-fctrs) when (isem(@fntsz))
  and (isem(@lnhght)) and (length(@sclng-fctrs) = 6),
  (isem(@fntsz)) and (isunit(@lnhght, rem)) and (length(@sclng-fctrs) = 6),
  (isem(@fntsz)) and (ispixel(@lnhght)) and (length(@sclng-fctrs) = 6),
  (isunit(@fntsz, rem)) and (isem(@lnhght)) and (length(@sclng-fctrs) = 6),
  (isunit(@fntsz, rem)) and (isunit(@lnhght, rem)) and (length(@sclng-fctrs) = 6),
  (isunit(@fntsz, rem)) and (ispixel(@lnhght)) and (length(@sclng-fctrs) = 6),
  (ispixel(@fntsz)) and (isem(@lnhght)) and (length(@sclng-fctrs) = 6),
  (ispixel(@fntsz)) and (isunit(@lnhght, rem)) and (length(@sclng-fctrs) = 6),
  (ispixel(@fntsz)) and (ispixel(@lnhght)) and (length(@sclng-fctrs) = 6) {
	@media all {
		line-height: @lnhght;
		@media (min-width: @v-dsktp-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 1));
		}
		@media (min-width: (@v-spn-thrshld + 1)) and (max-width: (@v-dsktp-thrshld - 1)) {
			font-size: (@fntsz * extract(@sclng-fctrs, 2));
		}
		@media (min-width: (@v-tblt-thrshld + 1)) and (max-width: @v-spn-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 3));
		}
		@media (min-width: (@v-lg-mbl-thrshld + 1)) and (max-width: @v-tblt-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 4));
		}
		@media (min-width: (@v-mbl-thrshld + 1)) and (max-width: @v-lg-mbl-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 5));
		}
		@media (max-width: @v-mbl-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 6));
		}
	}
}

.has-responsive-font(@fntsz, @lnhght, @sclng-fctrs: @v-fnt-sclng-fctrs) when (isem(@fntsz))
 and (@lnhght = false) and (length(@sclng-fctrs) = 6),
  (isunit(@fntsz, rem)) and (@lnhght = false) and (length(@sclng-fctrs) = 6),
  (ispixel(@fntsz)) and (@lnhght = false) and (length(@sclng-fctrs) = 6) {
	@media all {
		font-size: @fntsz;
		@media (min-width: @v-dsktp-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 1));
		}
		@media (min-width: (@v-spn-thrshld + 1)) and (max-width: (@v-dsktp-thrshld - 1)) {
			font-size: (@fntsz * extract(@sclng-fctrs, 2));
		}
		@media (min-width: (@v-tblt-thrshld + 1)) and (max-width: @v-spn-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 3));
		}
		@media (min-width: (@v-lg-mbl-thrshld + 1)) and (max-width: @v-tblt-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 4));
		}
		@media (min-width: (@v-mbl-thrshld + 1)) and (max-width: @v-lg-mbl-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 5));
		}
		@media (max-width: @v-mbl-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 6));
		}
	}
}

.has-sectionally-responsive-font(@fntsz, @lnhght) when (isem(@fntsz)) and (isem(@lnhght)),
 (isunit(@fntsz, rem)) and (isunit(@lnhght, rem)),
 (isunit(@fntsz, rem)) and (isem(@lnhght)),
 (ispixel(@fntsz)) and (ispixel(@lnhght)),
 (ispixel(@fntsz)) and (isem(@lnhght)) {
	.row.single:not(.mimic-multi-column-sections) .column & {
		.has-responsive-font(@fntsz, @lnhght);
	}
	.row.single.mimic-two-column-sections .column & {
		.has-responsive-font(@fntsz, @lnhght, @v-fnt-sclng-fctrs-alt);
	}
	.row.side-right .column &,
	.row.side-left .column &,
	.row.halves .column & {
		.has-responsive-font(@fntsz, @lnhght, @v-fnt-sclng-fctrs-alt);
	}
	.row.thirds .column &,
	.row.quarters .column & {
		.has-responsive-font(@fntsz, @lnhght, @v-fnt-sclng-fctrs-alt-2);
	}
}


//        ┌-----------------------------------------------------------------------------------------------------------┐
//        │ ···· Iterative ruleset applications ····································································· │
//        └-----------------------------------------------------------------------------------------------------------┘

.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 1) and
 (isruleset(@ruleset-to-apply)) {
	@slctr: extract(@slctr-list,1);
	@{slctr} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 2) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@{slctr-1},
	@{slctr-2} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 3) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 4) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 5) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 6) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@slctr-6: extract(@slctr-list,6);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5},
	@{slctr-6} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 7) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@slctr-6: extract(@slctr-list,6);
	@slctr-7: extract(@slctr-list,7);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5},
	@{slctr-6},
	@{slctr-7} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 8) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@slctr-6: extract(@slctr-list,6);
	@slctr-7: extract(@slctr-list,7);
	@slctr-8: extract(@slctr-list,8);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5},
	@{slctr-6},
	@{slctr-7},
	@{slctr-8} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 9) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@slctr-6: extract(@slctr-list,6);
	@slctr-7: extract(@slctr-list,7);
	@slctr-8: extract(@slctr-list,8);
	@slctr-9: extract(@slctr-list,9);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5},
	@{slctr-6},
	@{slctr-7},
	@{slctr-8},
	@{slctr-9} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 10) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@slctr-6: extract(@slctr-list,6);
	@slctr-7: extract(@slctr-list,7);
	@slctr-8: extract(@slctr-list,8);
	@slctr-9: extract(@slctr-list,9);
	@slctr-10: extract(@slctr-list,10);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5},
	@{slctr-6},
	@{slctr-7},
	@{slctr-8},
	@{slctr-9},
	@{slctr-10} {
		@ruleset-to-apply();
	}
}

//        ┌-----------------------------------------------------------------------------------------------------------┐
//        │ ···· Interpolated property specifications ······························································· │
//        └-----------------------------------------------------------------------------------------------------------┘

.has-responsive-property(@property, @value, @sclng-fctrs: @v-fnt-sclng-fctrs) when (isnumber(@value))
  and (length(@sclng-fctrs) = 6) {
	@media all {
		@{property}: @value;
		@media (min-width: @v-dsktp-thrshld) {
			@{property}: (@value * extract(@sclng-fctrs, 1));
		}
		@media (min-width: (@v-spn-thrshld + 1)) and (max-width: (@v-dsktp-thrshld - 1)) {
			@{property}: (@value * extract(@sclng-fctrs, 2));
		}
		@media (min-width: (@v-tblt-thrshld + 1)) and (max-width: @v-spn-thrshld) {
			@{property}: (@value * extract(@sclng-fctrs, 3));
		}
		@media (min-width: (@v-lg-mbl-thrshld + 1)) and (max-width: @v-tblt-thrshld) {
			@{property}: (@value * extract(@sclng-fctrs, 4));
		}
		@media (min-width: (@v-mbl-thrshld + 1)) and (max-width: @v-lg-mbl-thrshld) {
			@{property}: (@value * extract(@sclng-fctrs, 5));
		}
		@media (max-width: @v-mbl-thrshld) {
			@{property}: (@value * extract(@sclng-fctrs, 6));
		}
	}
}
