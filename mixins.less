// ╔═════════════════════════════════════════════════════════════════════════════════════════════════════════╗ 
// ║ #### MIXINS ########################################################################################### ║
// ╠=========================================================================================================╣
// ║ DESCRIPTION: Intended for use with all elements regardless of semantics                                 ║
// ║ LAYOUT: This document is layed out according to browser rendering sequence; styles related to layout    ║
// ║          are followed by those related to painting and then dynamic changes to the DOM tree.            ║
// ╚═════════════════════════════════════════════════════════════════════════════════════════════════════════╝
//
//     ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
//     │ ++++ CONTROLLING LAYOUT +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ │
//     │  Mixins for broadly controlling content layout.                                                 │
//     └─────────────────────────────────────────────────────────────────────────────────────────────────┘
//
.initially-hidden, 
div.column .initially-hidden {
    display: none;
}

.set-widths(@wdth, @mn-wdth: "na", @mx-wdth: "na") when (@mn-wdth > 0) and (isnumber(@mn-wdth))
  and (@mx-wdth = "na") {
	width: @wdth;
	min-width: @mn-wdth;
}
.set-widths(@wdth, @mn-wdth: "na", @mx-wdth: "na") when (@mx-wdth = "na") and (@mx-wdth > 0)
  and (isnumber(@mx-wdth)) {
	width: @wdth;
	max-width: @mx-wdth;
}
.set-widths(@wdth, @mn-wdth: "na", @mx-wdth: "na") when (@mx-wdth = "na") and (@mx-wdth > 0)
  and (isnumber(@mx-wdth)) {
	width: @wdth;
	min-width: @mn-wdth;
	max-width: @mx-wdth;
}

.set-pstn-top(@pstn) when not (@pstn = "na") {
	top: @pstn;
}
.set-pstn-rgt(@pstn) when not (@pstn = "na") {
	right: @pstn;
}
.set-pstn-btm(@pstn) when not (@pstn = "na") {
	bottom: @pstn;
}
.set-pstn-lft(@pstn) when not (@pstn = "na") {
	left: @pstn;
}
.set-position(@pstn: "na", @pstn-top: "na", @pstn-rgt: "na", @pstn-btm: "na", @pstn-lft: "na") when not (@pstn = "na") {
	position: @pstn;
	.set-pstn-top(@pstn-top);
	.set-pstn-rgt(@pstn-rgt);
	.set-pstn-btm(@pstn-btm);
	.set-pstn-lft(@pstn-lft);
}

//     ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
//     │ ++++ SPACING ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ │
//     │  Mixins for specifying margins and padding.                                                     │
//     └─────────────────────────────────────────────────────────────────────────────────────────────────┘
//
.margin-centered,
div.column .margin-centered {
    margin-right: auto;
     margin-left: auto;
}

.vrtcl-spcng-full() {
    margin-top: @v-dflt-spcng;
     margin-bottom: @v-dflt-spcng;
}

.vrtcl-spcng-less() {
    margin-top: (@v-dflt-spcng * 0.75);
     margin-bottom: (@v-dflt-spcng * 0.75);
}

.vrtcl-spcng-half() {
    margin-top: (@v-dflt-spcng / 2);
     margin-bottom: (@v-dflt-spcng / 2);
}

.spaces-top(@sclng-fctr: 1.0) {
    margin-top: (@v-dflt-spcng * @sclng-fctr);
}

.spaces-rgt(@sclng-fctr: 1.0) {
    margin-right: (@v-dflt-spcng * @sclng-fctr);
}

.spaces-btm(@sclng-fctr: 1.0) {
    margin-bottom: (@v-dflt-spcng * @sclng-fctr);
}

.spaces-lft(@sclng-fctr: 1.0) {
    margin-left: (@v-dflt-spcng * @sclng-fctr);
}

.spaces-top-full,
div.column .spaces-top-full {
    .spaces-top(@sz-xxxlrg);
}

.spaces-top-nrml,
div.column .spaces-top-nrml {
    .spaces-top;
}

.spaces-top-half,
div.column .spaces-top-half {
    .spaces-top(@sz-xsmll);
}

.spaces-top-qrtr,
div.column .spaces-top-qrtr {
    .spaces-top(@sz-xxsmll);
}

.spaces-top-none,
div.column .spaces-top-none {
    .spaces-top(0) !important;
}

.spaces-rgt-full,
div.column .spaces-rgt-full {
    .spaces-rgt(@sz-xxxlrg);
}

.spaces-rgt-nrml,
div.column .spaces-rgt-nrml {
    .spaces-rgt;
}

.spaces-rgt-half,
div.column .spaces-rgt-half {
    .spaces-rgt(@sz-xsmll);
}

.spaces-rgt-qrtr,
div.column .spaces-rgt-qrtr {
    .spaces-rgt(@sz-xxsmll);
}

.spaces-rgt-none,
div.column .spaces-rgt-none {
    .spaces-rgt(0) !important;
}

.spaces-btm-full,
div.column .spaces-btm-full {
    .spaces-btm(@sz-xxxlrg);
}

.spaces-btm-nrml,
div.column .spaces-btm-nrml {
    .spaces-btm;
}

.spaces-btm-half,
div.column .spaces-btm-half {
    .spaces-btm(@sz-xsmll);
}

.spaces-btm-qrtr,
div.column .spaces-btm-qrtr {
    .spaces-btm(@sz-xxsmll);
}

.spaces-btm-none,
div.column .spaces-btm-none {
    .spaces-btm(0) !important;
}

.spaces-lft-full,
div.column .spaces-lft-full {
    .spaces-lft(@sz-xxxlrg);
}

.spaces-lft-nrml,
div.column .spaces-lft-nrml {
    .spaces-lft;
}

.spaces-lft-half,
div.column .spaces-lft-half {
    .spaces-lft(@sz-xsmll);
}

.spaces-lft-qrtr,
div.column .spaces-lft-qrtr {
    .spaces-lft(@sz-xxsmll);
}

.spaces-lft-none,
div.column .spaces-lft-none {
    .spaces-lft(0) !important;
}

.pads-top(@sclng-fctr: 1.0) {
    padding-top: (@v-dflt-spcng * @sclng-fctr);
}

.pads-rgt(@sclng-fctr: 1.0) {
    padding-right: (@v-dflt-spcng * @sclng-fctr);
}

.pads-btm(@sclng-fctr: 1.0) {
    padding-bottom: (@v-dflt-spcng * @sclng-fctr);
}

.pads-lft(@sclng-fctr: 1.0) {
    padding-right: (@v-dflt-spcng * @sclng-fctr);
}

.pads-top-nrml,
div.column .pads-top-nrml {
    .pads-top;
}

.pads-top-half,
div.column .pads-top-half {
    .pads-top(@sz-xsmll);
}

.pads-rgt-nrml,
div.column .pads-rgt-nrml {
    .pads-rgt;
}

.pads-rgt-half,
div.column .pads-rgt-half {
    .pads-rgt(@sz-xsmll);
}

.pads-btm-nrml,
div.column .pads-btm-nrml {
    .pads-btm;
}

.pads-btm-half,
div.column .pads-btm-half {
    .pads-btm(@sz-xsmll);
}

.pads-lft-nrml,
div.column .pads-lft-nrml {
    .pads-lft;
}

.pads-lft-half,
div.column .pads-lft-half {
    .pads-lft(@sz-xsmll);
}

.generate-indents(4);

.generate-indents(@n, @i: 1) when (@i <= @n) {
    .indent-@{i}x,
	div.column .indent-@{i}x {
        padding-left: (2rem * @i);
    }
    .indent-rgt-@{i}x,
	div.column .indent-rgt-@{i}x {
        padding-right: (2rem * @i);
    }
    .generate-indents(@n, (@i + 1));
}

//     ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
//     │ ++++ TEXTUAL RENDERING ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ │
//     │  Mixins for controlling the layout, sizing, and positioning of text nodes.                      │
//     └─────────────────────────────────────────────────────────────────────────────────────────────────┘
//
.breaks-words,
div.column .breaks-words {
    word-wrap: break-word;
}

.centered,
div.column .centered,
.centers-text,
div.column .centers-text {
    text-align: center;
}

.has-centered-txt() {
    text-align: center;
}

.has-smllr-txt() {
    font-size: 0.9em;
}

.has-upprcs-txt() {
    text-transform: uppercase;
}

//     ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
//     │ ++++ BORDERING ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ │
//     │  Mixins for specifying the border around element nodes.                                         │
//     └─────────────────────────────────────────────────────────────────────────────────────────────────┘
//
.soft-gray-border,
div.column .soft-gray-border {
    .rgb-darkest-gray(); border: 1px solid rgba(@rval, @gval, @bval, 0.5);
}

.has-pull-quote-bordering {
	&:not(.alt) {
		position: relative;
		padding-top: (@v-btm-mrgns / 3) !important;
		padding-bottom: (@v-btm-mrgns / 3) !important;
		margin-top: (@v-btm-mrgns / 3);	
		&:before,
		&:after {
			content: "";
			position: absolute;
			left: 0;
			width: 67%;
		}
		&:before {
			top: (-1 * @v-btm-mrgns / 3);
			height: 5px;
			border-top: 5px solid rgba(red(@hex-darker-gray), green(@hex-darker-gray),
						blue(@hex-darker-gray), 0.33);
		}
		&:after {
			bottom: (-1 * @v-btm-mrgns / 3);
			height: 1px;
			width: 33%;
			border-top: 1px solid rgba(red(@hex-darker-gray), green(@hex-darker-gray),
						blue(@hex-darker-gray), 0.25);
		}
	}
	&.alt {
		position: relative;
		padding-left: (@v-btm-mrgns * 3 / 4) !important;
		padding-right: (@v-btm-mrgns * 3 / 4) !important;
		border-right: 1px solid rgba(red(@hex-darker-gray), green(@hex-darker-gray),
					blue(@hex-darker-gray), 0.25);
		border-left: 5px solid rgba(red(@hex-darker-gray), green(@hex-darker-gray),
					blue(@hex-darker-gray), 0.33);
		&:before,
		&:after {
			content: "";
			position: absolute;
			top: 0;
			width: 1px;
			height: 100%;
		}
		&:before {
			right: 1px;
			background-color: rgba(red(@hex-darker-gray), green(@hex-darker-gray),
								   blue(@hex-darker-gray), 0.125);
		}
		&:after {
			right: 3px;
			background-color: rgba(red(@hex-darker-gray), green(@hex-darker-gray),
								   blue(@hex-darker-gray), 0.0675);
		}
	}
}
	
//     ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
//     │ ++++ TYPOGRAPHY +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ │
//     │  Mixins for specifying font sizes, line heights, etc.                                           │
//     └─────────────────────────────────────────────────────────────────────────────────────────────────┘
//
.has-responsive-font(@fntsz, @lnhght, @sclng-fctrs: @v-fnt-sclng-fctrs) when (isem(@fntsz))
  and (isem(@lnhght)) and (length(@sclng-fctrs) = 6),
  (isem(@fntsz)) and (isunit(@lnhght, rem)) and (length(@sclng-fctrs) = 6),
  (isem(@fntsz)) and (ispx(@lnhght)) and (length(@sclng-fctrs) = 6),
  (isunit(@fntsz, rem)) and (isem(@lnhght)) and (length(@sclng-fctrs) = 6),
  (isunit(@fntsz, rem)) and (isunit(@lnhght, rem)) and (length(@sclng-fctrs) = 6),
  (isunit(@fntsz, rem)) and (ispx(@lnhght)) and (length(@sclng-fctrs) = 6),
  (ispx(@fntsz)) and (isem(@lnhght)) and (length(@sclng-fctrs) = 6),
  (ispx(@fntsz)) and (isunit(@lnhght, rem)) and (length(@sclng-fctrs) = 6),
  (ispx(@fntsz)) and (ispx(@lnhght)) and (length(@sclng-fctrs) = 6) {
	@media all {
		line-height: @lnhght;
		font-size: @fntsz;
		@media (min-width: @v-dsktp-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 1));
		}
		@media (min-width: (@v-spn-thrshld + 1)) and (max-width: (@v-dsktp-thrshld - 1)) {
			font-size: (@fntsz * extract(@sclng-fctrs, 2));
		}
		@media (min-width: (@v-tblt-thrshld + 1)) and (max-width: @v-spn-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 3));
		}
		@media (min-width: (@v-lg-mbl-thrshld + 1)) and (max-width: @v-tblt-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 4));
		}
		@media (min-width: (@v-mbl-thrshld + 1)) and (max-width: @v-lg-mbl-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 5));
		}
		@media (max-width: @v-mbl-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 6));
		}
	}
}

.has-responsive-font(@fntsz, @lnhght, @sclng-fctrs: @v-fnt-sclng-fctrs) when (isem(@fntsz))
  and (@lnhght = false) and (length(@sclng-fctrs) = 6),
  (isunit(@fntsz, rem)) and (@lnhght = false) and (length(@sclng-fctrs) = 6),
  (ispx(@fntsz)) and (@lnhght = false) and (length(@sclng-fctrs) = 6) {
	@media all {
		font-size: @fntsz;
		@media (min-width: @v-dsktp-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 1));
		}
		@media (min-width: (@v-spn-thrshld + 1)) and (max-width: (@v-dsktp-thrshld - 1)) {
			font-size: (@fntsz * extract(@sclng-fctrs, 2));
		}
		@media (min-width: (@v-tblt-thrshld + 1)) and (max-width: @v-spn-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 3));
		}
		@media (min-width: (@v-lg-mbl-thrshld + 1)) and (max-width: @v-tblt-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 4));
		}
		@media (min-width: (@v-mbl-thrshld + 1)) and (max-width: @v-lg-mbl-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 5));
		}
		@media (max-width: @v-mbl-thrshld) {
			font-size: (@fntsz * extract(@sclng-fctrs, 6));
		}
	}
}

.has-sectionally-responsive-font(@fntsz, @lnhght) when (isem(@fntsz)) and (isem(@lnhght)) {
	section.row.single div.column & {
		.has-responsive-font(@fntsz, @lnhght);
	}
	section.row.side-right div.column &,
	section.row.side-left div.column &,
	section.row.halves div.column & {
		.has-responsive-font(@fntsz, @lnhght, @v-fnt-sclng-fctrs-alt);
	}
	section.row.thirds div.column &,
	section.row.quarters div.column & {
		.has-responsive-font(@fntsz, @lnhght, @v-fnt-sclng-fctrs-alt-2);
	}
}

//     ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
//     │ ++++ RULESET APPLICATIONS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ │
//     │  Mixins for applying a ruleset to lists of selectors.                                           │
//     └─────────────────────────────────────────────────────────────────────────────────────────────────┘
//
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 1) and
 (isruleset(@ruleset-to-apply)) {
	@slctr: extract(@slctr-list,1);
	@{slctr} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 2) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@{slctr-1},
	@{slctr-2} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 3) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 4) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 5) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 6) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@slctr-6: extract(@slctr-list,6);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5},
	@{slctr-6} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 7) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@slctr-6: extract(@slctr-list,6);
	@slctr-7: extract(@slctr-list,7);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5},
	@{slctr-6},
	@{slctr-7} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 8) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@slctr-6: extract(@slctr-list,6);
	@slctr-7: extract(@slctr-list,7);
	@slctr-8: extract(@slctr-list,8);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5},
	@{slctr-6},
	@{slctr-7},
	@{slctr-8} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 9) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@slctr-6: extract(@slctr-list,6);
	@slctr-7: extract(@slctr-list,7);
	@slctr-8: extract(@slctr-list,8);
	@slctr-9: extract(@slctr-list,9);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5},
	@{slctr-6},
	@{slctr-7},
	@{slctr-8},
	@{slctr-9} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 10) and
 (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@slctr-6: extract(@slctr-list,6);
	@slctr-7: extract(@slctr-list,7);
	@slctr-8: extract(@slctr-list,8);
	@slctr-9: extract(@slctr-list,9);
	@slctr-10: extract(@slctr-list,10);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5},
	@{slctr-6},
	@{slctr-7},
	@{slctr-8},
	@{slctr-9},
	@{slctr-10} {
		@ruleset-to-apply();
	}
}

//     ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
//     │ ++++ INTERPOLATED PROPERTY SPECIFICATIONS +++++++++++++++++++++++++++++++++++++++++++++++++++++ │
//     │  Mixins for applying a style rule to an interpolated property.                                  │
//     └─────────────────────────────────────────────────────────────────────────────────────────────────┘
//
.has-responsive-property(@property, @value, @sclng-fctrs: @v-fnt-sclng-fctrs) when (isnumber(@value))
  and (length(@sclng-fctrs) = 6) {
	@media all {
		@{property}: @value;
		@media (min-width: @v-dsktp-thrshld) {
			@{property}: (@value * extract(@sclng-fctrs, 1));
		}
		@media (min-width: (@v-spn-thrshld + 1)) and (max-width: (@v-dsktp-thrshld - 1)) {
			@{property}: (@value * extract(@sclng-fctrs, 2));
		}
		@media (min-width: (@v-tblt-thrshld + 1)) and (max-width: @v-spn-thrshld) {
			@{property}: (@value * extract(@sclng-fctrs, 3));
		}
		@media (min-width: (@v-lg-mbl-thrshld + 1)) and (max-width: @v-tblt-thrshld) {
			@{property}: (@value * extract(@sclng-fctrs, 4));
		}
		@media (min-width: (@v-mbl-thrshld + 1)) and (max-width: @v-lg-mbl-thrshld) {
			@{property}: (@value * extract(@sclng-fctrs, 5));
		}
		@media (max-width: @v-mbl-thrshld) {
			@{property}: (@value * extract(@sclng-fctrs, 6));
		}
	}
}
