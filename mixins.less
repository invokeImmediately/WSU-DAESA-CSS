/** ────────────────────────────────────────────────────────────────────────────────────────────────
 *    ▐▀▄▀▌▀█▀▐▄ ▄▌▀█▀ ▐▀▀▄ ▄▀▀▀   █    █▀▀▀ ▄▀▀▀ ▄▀▀▀
 *    █ ▀ ▌ █   █   █  █  ▐ ▀▀▀█   █  ▄ █▀▀  ▀▀▀█ ▀▀▀█
 *    █   ▀▀▀▀▐▀ ▀▌▀▀▀ ▀  ▐ ▀▀▀  ▀ ▀▀▀  ▀▀▀▀ ▀▀▀  ▀▀▀
 *
 *  Contains Less mixins for supporting semantic CSS based design of WSU DASA web sites built using
 *    the WSUWP platform employing the Spine Parent or WDS themes. CSS declarations effected by
 *    invocation or inclusion of these mixins are designed to accompany or supersede styling
 *    associated with the active theme.
 *
 *  @version 1.1.3
 *
 *  @author Daniel Rieck <daniel.rieck@wsu.edu> (https://github.com/invokeImmediately)
 *  @link https://github.com/invokeImmediately/WSU-DAESA-CSS/blob/main/mixins.less
 *  @license MIT Copyright (c) 2022 Washington State University
 *    Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 *      and associated documentation files (the "Software"), to deal in the Software without
 *      restriction, including without limitation the rights to use, copy, modify, merge, publish,
 *      distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom
 *      the Software is furnished to do so, subject to the following conditions:
 *    The above copyright notice and this permission notice shall be included in all copies or
 *      substantial portions of the Software.
 *    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 *      BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *      NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 *      CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *      ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *      SOFTWARE.
 *  ───────────────────────────────────────────────────────────────────────────────────────────────
 *   TABLE OF CONTENTS:
 *   ────────────────────────────────────────────────────────────────────────────────────────────
 *   §1: Semantic visibility control...........................................................50
 *   §2: Element sizing........................................................................74
 *   §3: Positioning...........................................................................96
 *   §4: Spacing..............................................................................122
 *   §5: Padding..............................................................................189
 *   §6: Typography...........................................................................280
 *   §7: Borders..............................................................................309
 *   §8: More typography......................................................................374
 *   §9: Semantic mixins for responsive layouts...............................................518
 *   §10: Iteratively specified CSS declarations..............................................533
 *   §11: Interpolated style declarations.....................................................698
 *   §12: Declaration of detached rulesets....................................................727
 *     >>> §12.1: Rulesets whose selectors might be "wrapped" by a prepended substring........731
 *     >>> §12.2: Unwrapped rulesets..........................................................751
 *   ───────────────────────────────────────────────────────────────────────────────────────────────
 */

/**   ----------------------------------------------------------------------------------------------
 *    §1: Semantic visibility control
 */

.initially-hidden, 
.column .initially-hidden {
    display: none;
}

.for-screen-readers {
	box-sizing: border-box !important;
	height: 0 !important;
	width: 0 !important;
	border: 0 !important;
	overflow: hidden !important;
	opacity: 0 !important;

	&.row {
		margin: 0 !important;
		padding: 0 !important;
	}
}

// TODO: Eliminate or move to utility-mixins.less.
/**   ----------------------------------------------------------------------------------------------
 *    §2: Element sizing
 */

.set-widths(@wdth, @mn-wdth: "na", @mx-wdth: "na") when (@mn-wdth > 0) and (isnumber(@mn-wdth))
  and (@mx-wdth = "na") {
	width: @wdth;
	min-width: @mn-wdth;
}
.set-widths(@wdth, @mn-wdth: "na", @mx-wdth: "na") when (@mx-wdth = "na") and (@mx-wdth > 0)
  and (isnumber(@mx-wdth)) {
	width: @wdth;
	max-width: @mx-wdth;
}
.set-widths(@wdth, @mn-wdth: "na", @mx-wdth: "na") when (@mx-wdth = "na") and (@mx-wdth > 0)
  and (isnumber(@mx-wdth)) {
	width: @wdth;
	min-width: @mn-wdth;
	max-width: @mx-wdth;
}

// TODO: Eliminate or move to utility-mixins.less.
/**   ----------------------------------------------------------------------------------------------
 *    §3: Positioning
 */

.set-pstn-top(@pstn) when not (@pstn = "na") {
	top: @pstn;
}
.set-pstn-rgt(@pstn) when not (@pstn = "na") {
	right: @pstn;
}
.set-pstn-btm(@pstn) when not (@pstn = "na") {
	bottom: @pstn;
}
.set-pstn-lft(@pstn) when not (@pstn = "na") {
	left: @pstn;
}
.set-position(@pstn: "na", @pstn-top: "na", @pstn-rgt: "na", @pstn-btm: "na", @pstn-lft: "na") when 
		not (@pstn = "na") {
	position: @pstn;
	.set-pstn-top(@pstn-top);
	.set-pstn-rgt(@pstn-rgt);
	.set-pstn-btm(@pstn-btm);
	.set-pstn-lft(@pstn-lft);
}

// TODO: Eliminate or move to utility-mixins.less.
/**   ----------------------------------------------------------------------------------------------
 *    §4: Spacing
 */

.vrtcl-spcng-full() {
    margin-top: @v-dflt-spcng;
     margin-bottom: @v-dflt-spcng;
}

.vrtcl-spcng-less() {
    margin-top: (@v-dflt-spcng * 0.75);
     margin-bottom: (@v-dflt-spcng * 0.75);
}

.vrtcl-spcng-half() {
    margin-top: (@v-dflt-spcng / 2);
     margin-bottom: (@v-dflt-spcng / 2);
}

.spaces-top(@sclng-fctr: 1.0) {
    margin-top: (@v-dflt-spcng * @sclng-fctr);
	&.forces-spacing {
		margin-top: (@v-dflt-spcng * @sclng-fctr) !important;
	}
}

.spaces-rgt(@sclng-fctr: 1.0) {
    margin-right: (@v-dflt-spcng * @sclng-fctr);
	&.forces-spacing {
		margin-right: (@v-dflt-spcng * @sclng-fctr) !important;
	}
}

.spaces-btm(@sclng-fctr: 1.0) {
    margin-bottom: (@v-dflt-spcng * @sclng-fctr);
	&.forces-spacing {
		margin-bottom: (@v-dflt-spcng * @sclng-fctr) !important;
	}
}

.spaces-lft(@sclng-fctr: 1.0) {
    margin-left: (@v-dflt-spcng * @sclng-fctr);
	&.forces-spacing {
		margin-left: (@v-dflt-spcng * @sclng-fctr) !important;
	}
}

.declare-spacing-class(@class-str, @spacing-factor) {
	.spaces-top-@{class-str},
	.column .spaces-top-@{class-str} {
		.spaces-top(@spacing-factor);
	}
	.spaces-rgt-@{class-str},
	.column .spaces-rgt-@{class-str} {
		.spaces-rgt(@spacing-factor);
	}
	.spaces-btm-@{class-str},
	.column .spaces-btm-@{class-str} {
		.spaces-btm(@spacing-factor);
	}
	.spaces-lft-@{class-str},
	.column .spaces-lft-@{class-str} {
		.spaces-lft(@spacing-factor);
	}
}

// TODO: Eliminate or move to utility-mixins.less.
/**   ----------------------------------------------------------------------------------------------
 *    §5: Padding
 */

.pads-top(@sclng-fctr: 1.0) {
    padding-top: (@v-dflt-spcng * @sclng-fctr);
}

.pads-rgt(@sclng-fctr: 1.0) {
    padding-right: (@v-dflt-spcng * @sclng-fctr);
}

.pads-btm(@sclng-fctr: 1.0) {
    padding-bottom: (@v-dflt-spcng * @sclng-fctr);
}

.pads-lft(@sclng-fctr: 1.0) {
    padding-right: (@v-dflt-spcng * @sclng-fctr);
}

.declare-padding-class(@class-str, @padding-factor) {
	.pads-top-@{class-str},
	.column .pads-top-@{class-str} {
		.pads-top(@padding-factor);
	}
	.pads-rgt-@{class-str},
	.column .pads-rgt-@{class-str} {
		.pads-rgt(@padding-factor);
	}
	.pads-btm-@{class-str},
	.column .pads-btm-@{class-str} {
		.pads-btm(@padding-factor);
	}
	.pads-lft-@{class-str},
	.column .pads-lft-@{class-str} {
		.pads-lft(@padding-factor);
	}
}

.generate-indents(4);

.generate-indents(@n, @i: 1) when (@i <= @n) {
    .indent-@{i}x,
	.column .indent-@{i}x {
        padding-left: (2rem * @i);
    }
    .indent-rgt-@{i}x,
	.column .indent-rgt-@{i}x {
        padding-right: (2rem * @i);
    }
    .generate-indents(@n, (@i + 1));
}

.has-responsive-padding(@padding-top: 0, @padding-rgt: 0, @padding-btm: 0, @padding-lft: 0) {
	.set-responsive-padding-top(@top-pad) when (isem(@top-pad)), (isunit(@top-pad, rem)), 
			(ispixel(@top-pad))  {
		padding-top: @top-pad;
	}
	.set-responsive-padding-rgt(@right-pad) when (isem(@right-pad)), (isunit(@right-pad, rem)), 
			(ispixel(@right-pad)) {
		padding-right: @right-pad;
	}
	.set-responsive-padding-btm(@bottom-pad) when (isem(@bottom-pad)), (isunit(@bottom-pad, rem)), 
			(ispixel(@bottom-pad)) {
		padding-bottom: @bottom-pad;
	}
	.set-responsive-padding-lft(@left-pad) when (isem(@left-pad)), (isunit(@left-pad, rem)), 
			(ispixel(@left-pad)) {
		padding-left: @left-pad;
	}
	.set-responsive-padding-top(@padding-top);
	.set-responsive-padding-rgt(@padding-rgt);
	.set-responsive-padding-btm(@padding-btm);
	.set-responsive-padding-lft(@padding-lft);
	@media all {
		@media (max-width:@large-mobile-screen-width) {
			.set-responsive-padding-top(@padding-top / 2);
			.set-responsive-padding-rgt(@padding-rgt / 2);
			.set-responsive-padding-btm(@padding-btm / 2);
			.set-responsive-padding-lft(@padding-lft / 2);
		}
		@media (max-width:@mobile-screen-width) {
			.set-responsive-padding-top(@padding-top / 4);
			.set-responsive-padding-rgt(@padding-rgt / 4);
			.set-responsive-padding-btm(@padding-btm / 4);
			.set-responsive-padding-lft(@padding-lft / 4);
		}
	} 
}

// TODO: Eliminate or move to utility-mixins.less.
/**   ----------------------------------------------------------------------------------------------
 *    §6: Typography
 */

.breaks-words,
.column .breaks-words {
    word-wrap: break-word;
}

.centered,
.column .centered,
.centers-text,
.column .centers-text {
    text-align: center;
}

.has-centered-txt() {
    text-align: center;
}

.has-smllr-txt() {
    font-size: 0.9em;
}

.has-upprcs-txt() {
    text-transform: uppercase;
}

// TODO: Eliminate or move to utility-mixins.less.
/**   ----------------------------------------------------------------------------------------------
 *    §7: Borders
 */

.soft-gray-border,
.column .soft-gray-border {
    .rgb-darkest-gray(); border: 1px solid rgba(@rval, @gval, @bval, 0.5);
}

.has-pull-quote-bordering(@coloring) when (iscolor(@coloring)) {
	&:not(.alt) {
		position: relative;
		padding-top: (@v-btm-mrgns / 3) !important;
		padding-bottom: (@v-btm-mrgns / 3) !important;
		&:not(:first-child) {
			margin-top: @v-dflt-spcng;
		}
		&:first-child,
		header:first-child + & {
			margin-top: (@v-btm-mrgns / 3);
		}
		&:before,
		&:after {
			content: "";
			position: absolute;
			left: 0;
			width: 67%;
		}
		&:before {
			top: (-1 * @v-btm-mrgns / 3);
			height: 5px;
			& { border-top: 5px solid @rgba; .getRgbaStr(@coloring, 1); }
		}
		&:after {
			bottom: (-1 * @v-btm-mrgns / 3);
			height: 1px;
			width: 33%;
			& { border-top: 1px solid @rgba; .getRgbaStr(@coloring, (0.25 / 0.33)); }
		}
	}
	&.alt {
		position: relative;
		padding-left: (@v-btm-mrgns * 3 / 4) !important;
		padding-right: (@v-btm-mrgns * 3 / 4) !important;
		& { border-right: 1px solid @rgba; .getRgbaStr(@coloring, (0.25 / 0.33 / 4)); }
		& { border-left: 5px solid @rgba; .getRgbaStr(@coloring, 1); }
		&:before,
		&:after {
			content: "";
			position: absolute;
			top: 0;
			width: 1px;
			height: 100%;
		}
		&:before {
			right: 1px;
			& { background-color: @rgba; .getRgbaStr(@coloring, (0.25 / 0.33 / 2)); }
		}
		&:after {
			right: 3px;
			& { background-color: @rgba; .getRgbaStr(@coloring, (0.25 / 0.33 / 2)); }
		}
	}
}
	
/**   ----------------------------------------------------------------------------------------------
 *    §8: More typography
 */

.responsive-fSize(@fSize, @scale) when
		(isem(@fSize)) and (length(@scale) = 6),
		(isunit(@fSize, rem)) and (length(@scale) = 6),
		(ispixel(@fSize)) and (length(@scale) = 6) {
	@media all {
		@media (min-width: @desktop-width) {
			font-size: (@fSize * extract(@scale, 1));
		}
		@media (min-width: (@spine-threshold + 1)) and (max-width: (@desktop-width - 1)) {
			font-size: (@fSize * extract(@scale, 2));
		}
		@media (min-width: (@column-floating-threshold + 1)) and (max-width: @spine-threshold) {
			font-size: (@fSize * extract(@scale, 3));
		}
		@media (min-width: (@large-mobile-screen-width + 1)) and
				(max-width: @column-floating-threshold) {
			font-size: (@fSize * extract(@scale, 4));
		}
		@media (min-width: (@mobile-screen-width + 1)) and (max-width: @large-mobile-screen-width) {
			font-size: (@fSize * extract(@scale, 5));
		}
		@media (max-width: @mobile-screen-width) {
			font-size: (@fSize * extract(@scale, 6));
		}
	}
}

.has-responsive-font( @fntsz, @lnhght, @scaling-factors: @default-scaling-factors,
		@scaling-indices: @default-scaling-indices ) when
		( isem( @fntsz ) ) and ( isem( @lnhght ) ) and ( length( @scaling-factors ) = 5 ) and
			( length(@scaling-indices) = 6 ),
		( isem( @fntsz ) ) and ( isunit( @lnhght, rem ) ) and ( length( @scaling-factors ) = 5 ) and
			( length(@scaling-indices) = 6 ),
		( isem( @fntsz ) ) and ( ispixel( @lnhght ) ) and ( length( @scaling-factors ) = 5 ) and
			( length(@scaling-indices) = 6 ),
		( isunit( @fntsz, rem ) ) and ( isem( @lnhght ) ) and ( length( @scaling-factors ) = 5 ) and
			( length(@scaling-indices) = 6 ),
		( isunit( @fntsz, rem ) ) and ( isunit( @lnhght, rem ) ) and
			( length( @scaling-factors ) = 5 ) and ( length( @scaling-indices) = 6 ),
		( isunit( @fntsz, rem ) ) and ( ispixel( @lnhght ) )
			and ( length( @scaling-factors ) = 5 ) and ( length( @scaling-indices) = 6 ),
		( ispixel( @fntsz ) ) and ( isem( @lnhght ) ) and ( length( @scaling-factors ) = 5 ) and
			(length(@scaling-indices) = 6),
		( ispixel( @fntsz ) ) and ( isunit( @lnhght, rem ) ) and
			( length( @scaling-factors ) = 5 ) and ( length( @scaling-indices) = 6 ),
		( ispixel( @fntsz ) ) and ( ispixel( @lnhght ) ) and ( length( @scaling-factors ) = 5 ) and
			(length(@scaling-indices) = 6) {
	@media all {
		line-height: @lnhght;

		@media ( min-width: @desktop-width ) {
			font-size: (@fntsz * extract( @scaling-factors, extract( @scaling-indices, 1 ) ) );
		}
		@media ( min-width: ( @spine-threshold + 1 ) ) and ( max-width: ( @desktop-width - 1 ) ) {
			font-size: (@fntsz * extract(@scaling-factors, extract( @scaling-indices, 2 ) ));
		}
		@media ( min-width: ( @column-floating-threshold + 1 ) ) and
				( max-width: @spine-threshold ) {
			font-size: ( @fntsz * extract( @scaling-factors, extract( @scaling-indices, 3 ) ) );
		}
		@media ( min-width: ( @large-mobile-screen-width + 1 ) ) and
				( max-width: @column-floating-threshold ) {
			font-size: ( @fntsz * extract( @scaling-factors, extract( @scaling-indices, 4 ) ) );
		}
		@media ( min-width: ( @mobile-screen-width + 1 ) ) and
				( max-width: @large-mobile-screen-width ) {
			font-size: ( @fntsz * extract( @scaling-factors, extract( @scaling-indices, 5 ) ) );
		}
		@media ( max-width: @mobile-screen-width ) {
			font-size: ( @fntsz * extract( @scaling-factors, extract( @scaling-indices, 6 ) ) );
		}
	}
}

.has-responsive-font( @fntsz, @lnhght, @scaling-factors: @default-scaling-factors,
		@scaling-indices: @default-scaling-indices ) when
		( isem( @fntsz) ) and ( @lnhght = false ) and (length(@scaling-factors) = 5 ) and
			(length(@scaling-indices) = 6),
		( isunit( @fntsz, rem ) ) and ( @lnhght = false ) and ( length( @scaling-factors ) = 5 ) and
			(length(@scaling-indices) = 6),
		( ispixel( @fntsz ) ) and ( @lnhght = false ) and ( length( @scaling-factors ) = 5 ) and
			(length(@scaling-indices) = 6) {
	@media all {
		@media (min-width: @desktop-width) {
			font-size: ( @fntsz * extract( @scaling-factors, extract( @scaling-indices, 1 ) ) );
		}
		@media (min-width: (@spine-threshold + 1)) and (max-width: (@desktop-width - 1)) {
			font-size: ( @fntsz * extract( @scaling-factors, extract( @scaling-indices, 2 ) ) );
		}
		@media (min-width: (@column-floating-threshold + 1)) and (max-width: @spine-threshold) {
			font-size: ( @fntsz * extract( @scaling-factors, extract( @scaling-indices, 3 ) ) );
		}
		@media (min-width: (@large-mobile-screen-width + 1)) and
				(max-width: @column-floating-threshold) {
			font-size: ( @fntsz * extract( @scaling-factors, extract( @scaling-indices, 4 ) ) );
		}
		@media (min-width: (@mobile-screen-width + 1)) and (max-width: @large-mobile-screen-width) {
			font-size: ( @fntsz * extract( @scaling-factors, extract( @scaling-indices, 5 ) ) );
		}
		@media (max-width: @mobile-screen-width) {
			font-size: ( @fntsz * extract( @scaling-factors, extract( @scaling-indices, 6 ) ) );
		}
	}
}

.has-sectionally-responsive-font( @fntsz, @lnhght, @scaling-factors: @default-scaling-factors ) when
		( isem( @fntsz ) ) and ( isem( @lnhght ) ) and ( length( @scaling-factors ) = 5 ),
		( isunit( @fntsz, rem ) ) and ( isunit( @lnhght, rem ) ) and
			( length( @scaling-factors ) = 5 ),
		( isunit( @fntsz, rem ) ) and ( isem( @lnhght ) ) and ( length( @scaling-factors ) = 5 ),
		( ispixel( @fntsz ) ) and ( ispixel( @lnhght ) ) and ( length( @scaling-factors ) = 5 ),
		( ispixel( @fntsz ) ) and ( isem( @lnhght ) ) and ( length( @scaling-factors ) = 5 ),
		( isem( @fntsz) ) and ( @lnhght = false ) and ( length( @scaling-factors ) = 5),
		( isunit( @fntsz, rem ) ) and ( @lnhght = false ) and ( length( @scaling-factors ) = 5 ),
		( ispixel( @fntsz ) ) and ( @lnhght = false ) and ( length( @scaling-factors ) = 5 ) {
	.row.single &,
	.row.side-right &.one,
	.row.side-left &.two {
		@scaling-indices: 2, 3, 3, 2, 3, 4;
		.has-responsive-font(@fntsz, @lnhght, @scaling-factors, @scaling-indices);
	}
	.row.mimic-two-column-sections &,
	.row.side-right &.two,
	.row.side-right &.one.mimic-sidebar,
	.row.side-left &.one,
	.row.side-left &.two.mimic-sidebar,
	.row.halves & {
		@scaling-indices: 2, 3, 3, 2, 3, 4;
		.has-responsive-font( @fntsz, @lnhght, @scaling-factors, @scaling-indices );
	}
	.row.thirds & {
		@scaling-indices: 2, 4, 4, 2, 3, 4;
		.has-responsive-font( @fntsz, @lnhght, @scaling-factors, @scaling-indices );
	}
	.row.quarters & {
		@scaling-indices: 3, 4, 4, 3, 4, 5;
		.has-responsive-font( @fntsz, @lnhght, @scaling-factors, @scaling-indices );
	}
}

/**   ----------------------------------------------------------------------------------------------
 *    §9: Semantic mixins for responsive layouts
 */

.declare-mobile-layout(@lg-mobile-ruleset, @nrml-mobile-ruleset) 
		when (isruleset(@lg-mobile-ruleset)) and (isruleset(@nrml-mobile-ruleset)){
	@media only screen and (min-width:(@mobile-screen-width + 1)) 
			and (max-width:@large-mobile-screen-width) {
		@lg-mobile-ruleset();
	}
	@media only screen and (max-width:@mobile-screen-width) {
		@nrml-mobile-ruleset();
	}
}

/**   ----------------------------------------------------------------------------------------------
 *    §10: Iteratively specified CSS declarations
 */

.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 1) 
		and (isruleset(@ruleset-to-apply)) {
	@slctr: extract(@slctr-list,1);
	@{slctr} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 2) 
		and (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@{slctr-1},
	@{slctr-2} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 3) 
		and (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 4) 
		and (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 5) 
		and (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 6) 
		and (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@slctr-6: extract(@slctr-list,6);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5},
	@{slctr-6} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 7) 
		and (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@slctr-6: extract(@slctr-list,6);
	@slctr-7: extract(@slctr-list,7);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5},
	@{slctr-6},
	@{slctr-7} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 8) 
		and (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@slctr-6: extract(@slctr-list,6);
	@slctr-7: extract(@slctr-list,7);
	@slctr-8: extract(@slctr-list,8);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5},
	@{slctr-6},
	@{slctr-7},
	@{slctr-8} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 9) 
		and (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@slctr-6: extract(@slctr-list,6);
	@slctr-7: extract(@slctr-list,7);
	@slctr-8: extract(@slctr-list,8);
	@slctr-9: extract(@slctr-list,9);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5},
	@{slctr-6},
	@{slctr-7},
	@{slctr-8},
	@{slctr-9} {
		@ruleset-to-apply();
	}
}
.apply-ruleset-to-selector-list(@slctr-list, @ruleset-to-apply) when (length(@slctr-list) = 10) 
		and (isruleset(@ruleset-to-apply)) {
	@slctr-1: extract(@slctr-list,1);
	@slctr-2: extract(@slctr-list,2);
	@slctr-3: extract(@slctr-list,3);
	@slctr-4: extract(@slctr-list,4);
	@slctr-5: extract(@slctr-list,5);
	@slctr-6: extract(@slctr-list,6);
	@slctr-7: extract(@slctr-list,7);
	@slctr-8: extract(@slctr-list,8);
	@slctr-9: extract(@slctr-list,9);
	@slctr-10: extract(@slctr-list,10);
	@{slctr-1},
	@{slctr-2},
	@{slctr-3},
	@{slctr-4},
	@{slctr-5},
	@{slctr-6},
	@{slctr-7},
	@{slctr-8},
	@{slctr-9},
	@{slctr-10} {
		@ruleset-to-apply();
	}
}

/**   ----------------------------------------------------------------------------------------------
 *    §11: Interpolated style declarations
 */

.has-responsive-property(@property, @value, @sclng-fctrs: @v-fnt-sclng-fctrs) 
		when (isnumber(@value))	and (length(@sclng-fctrs) = 6) {
	@media all {
		@{property}: @value;
		@media (min-width: @desktop-width) {
			@{property}: (@value * extract(@sclng-fctrs, 1));
		}
		@media (min-width: (@spine-threshold + 1)) and (max-width: (@desktop-width - 1)) {
			@{property}: (@value * extract(@sclng-fctrs, 2));
		}
		@media (min-width: (@tablet-screen-width + 1)) and (max-width: @spine-threshold) {
			@{property}: (@value * extract(@sclng-fctrs, 3));
		}
		@media (min-width: (@large-mobile-screen-width + 1)) and (max-width: @tablet-screen-width) {
			@{property}: (@value * extract(@sclng-fctrs, 4));
		}
		@media (min-width: (@mobile-screen-width + 1)) and (max-width: @large-mobile-screen-width) {
			@{property}: (@value * extract(@sclng-fctrs, 5));
		}
		@media (max-width: @mobile-screen-width) {
			@{property}: (@value * extract(@sclng-fctrs, 6));
		}
	}
}

/**   ----------------------------------------------------------------------------------------------
 *    §12: Declaration of detached rulesets
 */

/**   ----------------------------------------------------------------------------------------------
 *      >>> §12.1: Rulesets whose selectors might be "wrapped" by a prepended substring
 */

.declare-ruleset(@ruleset, @wrapper, @switch: true) when (@switch) and (isruleset(@ruleset))
		and (@wrapper = ~"") {
	@ruleset();
}

.declare-ruleset(@ruleset, @wrapper, @switch: true) when (@switch) and (isruleset(@ruleset))
		and not (@wrapper = ~"") {
	@{wrapper} {
		@ruleset();
	}
}

.declare-ruleset(@ruleset, @wrapper, @switch: true) when not (@switch) and (isruleset(@ruleset)) {
	// Do nothing.
}

/**   ----------------------------------------------------------------------------------------------
 *      >>> §12.2: Unwrapped rulesets
 */

.declare-ruleset--unwrapped(@ruleset, @switch: true) when (@switch) and (isruleset(@ruleset)) {
	@ruleset();
}

.declare-ruleset--unwrapped(@ruleset, @switch: true) when not (@switch) and (isruleset(@ruleset)) {
	// Do nothing.
}
